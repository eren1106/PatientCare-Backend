datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS
enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum SignInMethod {
  EMAILPASSWORD
  GOOGLE
}

enum ExerciseDifficulty {
  EASY
  MEDIUM
  HARD
}

enum Gender {
  MALE
  FEMALE
}

enum Repeated {
  YES
  NO
}

// MODELS
model User {
  id                String       @id @default(cuid())
  username          String       @unique
  email             String       @unique
  ic                String       @unique
  fullname          String
  age               Int
  gender            Gender
  password          String
  signinMethod      SignInMethod
  role              UserRole
  profileImageUrl   String?
  // assignedDoctors   User[]
  lastLoginDatetime DateTime?
  createdDatetime   DateTime     @default(now())
  updatedDatetime   DateTime?
  isDelete          Boolean      @default(false)

  callTo               Call[]                 @relation("CallTo")
  callFrom             Call[]                 @relation("CallFrom")
  messageFrom          Message[]              @relation("MessageFrom")
  messageTo            Message[]              @relation("MessageTo")
  notification         Notification[]
  patientExercise      PatientExercise[]
  dailyPatientExercise DailyPatientExercise[]
  appointmentDoctor    Appointment[]          @relation("AppointmentDoctor")
  appointmentPatient   Appointment[]          @relation("AppointmentPatient")
  doctorValidation     DoctorValidation?
  patientRecordDoctor  PatientRecord[]        @relation("Doctor")
  patientRecordPatient PatientRecord[]        @relation("Patient")
  questionnaire        Questionnaire[]
}

model Call {
  id              String   @id @default(cuid())
  toUserId        String
  fromUserId      String
  status          String
  createdDatetime DateTime @default(now())

  userTo   User @relation("CallTo", fields: [toUserId], references: [id])
  userFrom User @relation("CallFrom", fields: [fromUserId], references: [id])
}

model Message {
  id              String   @id @default(cuid())
  message         String
  fromUserId      String
  toUserId        String
  createdDatetime DateTime @default(now())

  userFrom User @relation("MessageFrom", fields: [fromUserId], references: [id])
  userTo   User @relation("MessageTo", fields: [toUserId], references: [id])
}

model Notification {
  id              String   @id @default(cuid())
  userId          String
  title           String
  message         String
  redirectUrl     String?
  createdDatetime DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Assessment {
  id              String   @id @default(cuid())
  userId          String
  questionnaireId String
  createdDatetime DateTime @default(now())
  patientRecordId String

  questionnaire Questionnaire @relation(fields: [questionnaireId], references: [id])
  response      Response[]    @relation("AssessmentResponse")
  patientRecord PatientRecord @relation("PatientRecordAssessment", fields: [patientRecordId], references: [id])
}

model Questionnaire {
  id              String    @id @default(cuid())
  title           String
  description     String
  type            String
  authorId        String
  createdDatetime DateTime  @default(now())
  updatedDatetime DateTime?
  isDelete        Boolean   @default(false)

  author     User         @relation(fields: [authorId], references: [id])
  question   Question[]   @relation("QuestionnaireQuestion")
  assessment Assessment[]
}

model Question {
  id          String @id @default(cuid())
  title       String
  fieldTypeId String

  fieldType     FieldType       @relation(fields: [fieldTypeId], references: [id])
  response      Response[]
  questionnaire Questionnaire[] @relation("QuestionnaireQuestion")
  option        Option[]
}

model Option {
  id         String   @id @default(cuid())
  content    String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
}

model Response {
  id           String @id @default(cuid())
  assessmentId String
  questionId   String
  response     String

  question   Question   @relation(fields: [questionId], references: [id])
  assessment Assessment @relation("AssessmentResponse", fields: [assessmentId], references: [id])
}

model FieldType {
  id   String @id @default(cuid())
  name String

  question Question[]
}

model DoctorValidation {
  id                 String  @id @default(cuid())
  doctorId           String  @unique
  registrationNumber String
  identityImageUrl   String?

  user User @relation(fields: [doctorId], references: [id])
}

model PatientRecord {
  id              String    @id @default(cuid())
  doctorId        String
  patientId       String
  ic_no           String
  age             Int
  gender          Gender
  weight          Decimal
  height          Decimal
  isDelete        Boolean   @default(false)
  progressReport  String?
  createdDatetime DateTime  @default(now())
  updatedDatetime DateTime?

  doctor      User          @relation("Doctor", fields: [doctorId], references: [id])
  patient     User          @relation("Patient", fields: [patientId], references: [id])
  appointment Appointment[] @relation("PatientRecordAppointment")
  assessment  Assessment[]  @relation("PatientRecordAssessment")
  exercise    Exercise[]
  injuries    Injury[]      @relation("PatientRecordInjuries")

  @@unique([doctorId, patientId])
}

model Injury {
  id              String        @id @default(cuid())
  patientRecordId String
  painRegion      String
  duration        String
  painScore       Int
  description     String
  is_recurrent    Repeated
  createdDatetime DateTime      @default(now())
  updatedDatetime DateTime?
  patientRecord   PatientRecord @relation("PatientRecordInjuries", fields: [patientRecordId], references: [id])
}

model Appointment {
  id                String    @id @default(cuid())
  title             String
  description       String
  scheduledDatetime DateTime
  doctorId          String
  patientId         String
  createdDatetime   DateTime  @default(now())
  updatedDatetime   DateTime?

  userDoctor    User           @relation("AppointmentDoctor", fields: [doctorId], references: [id])
  userPatient   User           @relation("AppointmentPatient", fields: [patientId], references: [id])
  patientRecord PatientRecord? @relation("PatientRecordAppointment", fields: [doctorId, patientId], references: [doctorId, patientId])
}

model ExerciseCategory {
  id          String  @id @default(cuid())
  title       String
  description String
  categoryImg String?

  exercise Exercise[]
}

model Exercise {
  id                 String             @id @default(cuid())
  exerciseCategoryId String
  thumbnailUrl       String?
  title              String
  description        String
  duration           Int
  difficulty         ExerciseDifficulty
  content            String?
  videoUrl           String?
  createdDatetime    DateTime           @default(now())
  updatedDatetime    DateTime?

  exerciseCategory ExerciseCategory  @relation(fields: [exerciseCategoryId], references: [id])
  patientExercise  PatientExercise[]
  patientRecord    PatientRecord[]
}

model PatientExercise {
  id              String   @id @default(cuid())
  patientId       String
  exerciseId      String
  sets            Int
  createdDatetime DateTime @default(now())

  user                 User                   @relation(fields: [patientId], references: [id])
  exercise             Exercise               @relation(fields: [exerciseId], references: [id])
  dailyPatientExercise DailyPatientExercise[]
}

model DailyPatientExercise {
  id                String    @id @default(cuid())
  patientId         String
  patientExerciseId String
  isCompleted       Boolean   @default(false)
  createdDatetime   DateTime  @default(now())
  completedDatetime DateTime?

  user            User            @relation(fields: [patientId], references: [id])
  patientExercise PatientExercise @relation(fields: [patientExerciseId], references: [id])
}
