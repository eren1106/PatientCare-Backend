datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId             Int       @id @default(autoincrement())
  username           String    @unique
  email              String    @unique
  password           String
  signinMethod       String
  role               String
  profileImageUrl    String?
  assignedDoctors    String?
  lastLoginDatetime  DateTime?
  createdDatetime    DateTime  @default(now())
  updatedDatetime    DateTime?

  callTo             Call[]            @relation("CallTo")
  callFrom           Call[]            @relation("CallFrom")
  messageFrom        Message[]         @relation("MessageFrom")
  messageTo          Message[]         @relation("MessageTo")
  notification       Notification[]
  assessment         Assessment[]
  patientExercise    PatientExercise[]
  appointmentDoctor  Appointment[]     @relation("AppointmentDoctor")
  appointmentPatient Appointment[]     @relation("AppointmentPatient")
  doctorValidation   DoctorValidation?
  patientRecordDoctor  PatientRecord[]   @relation("Doctor")
  patientRecordPatient PatientRecord[]   @relation("Patient")
}

model Call {
  callId          Int      @id @default(autoincrement())
  toUserId        Int
  fromUserId      Int
  status          String
  createdDatetime DateTime @default(now())

  userTo   User @relation("CallTo", fields: [toUserId], references: [userId])
  userFrom User @relation("CallFrom", fields: [fromUserId], references: [userId])
}

model Message {
  messageId       Int      @id @default(autoincrement())
  message         String
  fromUserId      Int
  toUserId        Int
  createdDatetime DateTime @default(now())

  userFrom User @relation("MessageFrom", fields: [fromUserId], references: [userId])
  userTo   User @relation("MessageTo", fields: [toUserId], references: [userId])
}

model Notification {
  notificationId  Int      @id @default(autoincrement())
  userId          Int
  title           String
  message         String
  redirectUrl     String?
  createdDatetime DateTime @default(now())

  user User @relation(fields: [userId], references: [userId])
}

model Assessment {
  assessmentId    Int      @id @default(autoincrement())
  userId          Int
  questionnaireId Int
  createdDatetime DateTime @default(now())
  responseId      Int

  user           User            @relation(fields: [userId], references: [userId])
  questionnaire  Questionnaire   @relation(fields: [questionnaireId], references: [questionnaireId])
  response       Response        @relation(fields: [responseId], references: [responseId])
  patientRecord  PatientRecord[] @relation("PatientRecordAssessment")
}

model Questionnaire {
  questionnaireId Int       @id @default(autoincrement())
  title           String
  description     String
  type            String
  respondentId    Int
  authorId        Int
  createdDatetime DateTime  @default(now())
  updatedDatetime DateTime?

  question        Question[]   @relation("QuestionnaireQuestion")
  assessment      Assessment[]
}

model Question {
  questionId      Int    @id @default(autoincrement())
  title           String
  fieldTypeId     Int

  fieldType       FieldType       @relation(fields: [fieldTypeId], references: [fieldTypeId])
  response        Response[]
  questionnaire   Questionnaire[] @relation("QuestionnaireQuestion")
}

model Response {
  responseId      Int    @id @default(autoincrement())
  questionId      Int
  response        String

  question        Question     @relation(fields: [questionId], references: [questionId])
  assessment      Assessment[]
}

model FieldType {
  fieldTypeId     Int    @id @default(autoincrement())
  name            String

  question        Question[]
}

model DoctorValidation {
  doctorValidationId Int     @id @default(autoincrement())
  doctorId           Int     @unique
  registrationNumber String
  identityImageUrl   String?

  user User @relation(fields: [doctorId], references: [userId])
}

model PatientRecord {
  patientRecordId Int       @id @default(autoincrement())
  doctorId        Int
  patientId       Int
  createdDatetime DateTime  @default(now())
  updatedDatetime DateTime?

  doctor         User          @relation("Doctor", fields: [doctorId], references: [userId])
  patient        User          @relation("Patient", fields: [patientId], references: [userId])
  appointment    Appointment[] @relation("PatientRecordAppointment")
  assessment     Assessment[]  @relation("PatientRecordAssessment")
  exercise       Exercise[]

  @@unique([doctorId, patientId])
}

model Appointment {
  appointmentId      Int       @id @default(autoincrement())
  title              String
  description        String
  scheduledDatetime  DateTime
  doctorId           Int
  patientId          Int
  createdDatetime    DateTime  @default(now())
  updatedDatetime    DateTime?

  userDoctor     User           @relation("AppointmentDoctor", fields: [doctorId], references: [userId])
  userPatient    User           @relation("AppointmentPatient", fields: [patientId], references: [userId])
  patientRecord  PatientRecord? @relation("PatientRecordAppointment", fields: [doctorId, patientId], references: [doctorId, patientId])
}

model ExerciseCategory {
  exerciseCategoryId Int     @id @default(autoincrement())
  title              String
  description        String
  categoryImg        String?

  exercise Exercise[]
}

model Exercise {
  exerciseId          Int       @id @default(autoincrement())
  exerciseCategoryId  Int
  thumbnail           String?
  title               String
  description         String
  duration            Int
  difficulty          String
  content             String
  videoUrl            String?
  createdDatetime     DateTime  @default(now())
  updatedDatetime     DateTime?

  exerciseCategory ExerciseCategory  @relation(fields: [exerciseCategoryId], references: [exerciseCategoryId])
  patientExercise  PatientExercise[]
  patientRecord    PatientRecord[]
}

model PatientExercise {
  patientExerciseId Int       @id @default(autoincrement())
  userId            Int
  exerciseId        Int
  isCompleted       Boolean   @default(false)
  completedDatetime DateTime?

  user     User     @relation(fields: [userId], references: [userId])
  exercise Exercise @relation(fields: [exerciseId], references: [exerciseId])
}
