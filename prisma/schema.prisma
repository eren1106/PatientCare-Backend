datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS
enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum SignInMethod {
  EMAILPASSWORD
  GOOGLE
}

enum CallStatus {
  MISSED
  ACCEPTED
  REJECTED
}

enum ExerciseDifficulty {
  EASY
  MEDIUM
  HARD
}

enum Gender {
  MALE
  FEMALE
}

enum Repeated {
  YES
  NO
}

enum DoctorRegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
}

// MODELS
model User {
  id                       String                    @id @default(cuid())
  username                 String                    @unique
  email                    String                    @unique
  ic                       String                    @unique
  fullname                 String
  age                      Int
  gender                   Gender
  password                 String
  signinMethod             SignInMethod              @default(EMAILPASSWORD)
  role                     UserRole
  profileImageUrl          String?
  doctorRegistrationStatus DoctorRegistrationStatus?
  lastLoginDatetime        DateTime?
  createdDatetime          DateTime                  @default(now())
  updatedDatetime          DateTime?
  isDelete                 Boolean                   @default(false)
  isVerified               Boolean                   @default(false)
  verificationToken        String?                   @unique
  resetToken               String?                   @unique
  resetTokenExpiry         DateTime?

  callTo               Call[]                 @relation("CallTo")
  assessment           Assessment[]           @relation("AssessmentDoctor")
  callFrom             Call[]                 @relation("CallFrom")
  messageFrom          Message[]              @relation("MessageFrom")
  messageTo            Message[]              @relation("MessageTo")
  notification         Notification[]
  patientExercise      PatientExercise[]
  dailyPatientExercise DailyPatientExercise[]
  appointmentDoctor    Appointment[]          @relation("AppointmentDoctor")
  appointmentPatient   Appointment[]          @relation("AppointmentPatient")
  doctorValidation     DoctorValidation?
  patientRecordDoctor  PatientRecord[]        @relation("Doctor")
  patientRecordPatient PatientRecord[]        @relation("Patient")
  questionnaire        Questionnaire[]
}

model Call {
  id              String     @id @default(cuid())
  toUserId        String
  fromUserId      String
  status          CallStatus
  createdDatetime DateTime   @default(now())
  duration        Int        @default(0)
  userTo          User       @relation("CallTo", fields: [toUserId], references: [id])
  userFrom        User       @relation("CallFrom", fields: [fromUserId], references: [id])
}

model Message {
  id              String   @id @default(cuid())
  message         String
  fromUserId      String
  toUserId        String
  createdDatetime DateTime @default(now())

  userFrom User @relation("MessageFrom", fields: [fromUserId], references: [id])
  userTo   User @relation("MessageTo", fields: [toUserId], references: [id])
}

model Notification {
  id              String   @id @default(cuid())
  userId          String
  title           String
  message         String
  isRead          Boolean  @default(false)
  isClicked       Boolean  @default(false)
  redirectUrl     String?
  createdDatetime DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Questionnaire {
  id              String    @id @default(cuid())
  title           String
  description     String
  type            String
  index           String
  authorId        String
  createdDatetime DateTime  @default(now())
  updatedDatetime DateTime?
  isDelete        Boolean   @default(false)

  author     User         @relation(fields: [authorId], references: [id])
  assessment Assessment[]
  sections   Section[]    @relation("QuestionnaireSections")
}

model ExerciseSuggestion {
  id           String @id @default(cuid())
  analysis     String
  assessmentId String

  assessment Assessment   @relation("AssessmentExerciseSuggestion", fields: [assessmentId], references: [id])
  suggestion Suggestion[] @relation("Suggestion")
}

model Suggestion {
  id                   String @id @default(cuid())
  exerciseTitle        String
  exerciseId           String
  exerciseSuggestionId String

  exerciseSuggest ExerciseSuggestion @relation("Suggestion", fields: [exerciseSuggestionId], references: [id])
}

model Assessment {
  id              String   @id @default(cuid())
  questionnaireId String
  createdDatetime DateTime @default(now())
  patientRecordId String
  doctorId        String

  questionnaire   Questionnaire        @relation(fields: [questionnaireId], references: [id])
  response        Response[]           @relation("AssessmentResponse")
  patientRecord   PatientRecord        @relation("PatientRecordAssessment", fields: [patientRecordId], references: [id])
  doctor          User                 @relation("AssessmentDoctor", fields: [doctorId], references: [id])
  exerciseSuggest ExerciseSuggestion[] @relation("AssessmentExerciseSuggestion")
}

model Section {
  id              String @id @default(cuid())
  name            String
  description     String
  questionnaireId String

  questionnaire Questionnaire @relation("QuestionnaireSections", fields: [questionnaireId], references: [id])
  question      Question[]    @relation("SectionQuestion")
}

model Question {
  id        String @id @default(cuid())
  title     String
  sectionId String
  optionId  String

  response       Response[]
  section        Section        @relation("SectionQuestion", fields: [sectionId], references: [id])
  optionTemplate OptionTemplate @relation("QuestionOption", fields: [optionId], references: [id])
}

model OptionTemplate {
  id        String @id @default(cuid())
  scaleType String

  option   Option[]   @relation("OptionTemplate")
  question Question[] @relation("QuestionOption")
}

model Option {
  id               String  @id @default(cuid())
  optionTemplateId String
  scaleValue       Int
  content          String?

  response       Response[]     @relation("QuestionAnswer")
  optionTemplate OptionTemplate @relation("OptionTemplate", fields: [optionTemplateId], references: [id])
}

model Response {
  id           String @id @default(cuid())
  assessmentId String
  questionId   String
  optionId     String

  question   Question   @relation(fields: [questionId], references: [id])
  option     Option     @relation("QuestionAnswer", fields: [optionId], references: [id])
  assessment Assessment @relation("AssessmentResponse", fields: [assessmentId], references: [id])
}

model DoctorValidation {
  id                 String  @id @default(cuid())
  doctorId           String  @unique
  registrationNumber String
  identityImageUrl   String?

  user User @relation(fields: [doctorId], references: [id])
}

model PatientRecord {
  id              String    @id @default(cuid())
  doctorId        String
  patientId       String
  weight          Decimal
  height          Decimal
  isDelete        Boolean   @default(false)
  progressReport  String?
  createdDatetime DateTime  @default(now())
  updatedDatetime DateTime?

  doctor      User          @relation("Doctor", fields: [doctorId], references: [id])
  patient     User          @relation("Patient", fields: [patientId], references: [id])
  appointment Appointment[] @relation("PatientRecordAppointment")
  assessment  Assessment[]  @relation("PatientRecordAssessment")
  exercise    Exercise[]
  injuries    Injury[]      @relation("PatientRecordInjuries")

  @@unique([doctorId, patientId])
}

model Injury {
  id              String        @id @default(cuid())
  patientRecordId String
  painRegion      String
  duration        String
  painScore       Int
  description     String
  is_recurrent    Repeated
  createdDatetime DateTime      @default(now())
  updatedDatetime DateTime?
  patientRecord   PatientRecord @relation("PatientRecordInjuries", fields: [patientRecordId], references: [id])
}

model Appointment {
  id              String            @id @default(cuid())
  title           String
  description     String
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  doctorId        String
  patientId       String
  createdDatetime DateTime          @default(now())
  updatedDatetime DateTime?         @updatedAt
  status          AppointmentStatus @default(SCHEDULED)

  doctor        User          @relation("AppointmentDoctor", fields: [doctorId], references: [id], onDelete: Cascade)
  patient       User          @relation("AppointmentPatient", fields: [patientId], references: [id], onDelete: Cascade)
  patientRecord PatientRecord @relation("PatientRecordAppointment", fields: [doctorId, patientId], references: [doctorId, patientId])
}

model ExerciseCategory {
  id          String  @id @default(cuid())
  title       String
  description String
  categoryImg String?

  exercise Exercise[]
}

model Exercise {
  id                 String             @id @default(cuid())
  exerciseCategoryId String
  thumbnailUrl       String?
  title              String
  description        String
  duration           Int
  difficulty         ExerciseDifficulty
  content            String?
  videoUrl           String?
  createdDatetime    DateTime           @default(now())
  updatedDatetime    DateTime?

  exerciseCategory ExerciseCategory  @relation(fields: [exerciseCategoryId], references: [id])
  patientExercise  PatientExercise[]
  patientRecord    PatientRecord[]
}

model PatientExercise {
  id              String   @id @default(cuid())
  patientId       String
  exerciseId      String
  reps            Int
  sets            Int
  frequency       Int
  duration        Int
  createdDatetime DateTime @default(now())

  user                 User                   @relation(fields: [patientId], references: [id])
  exercise             Exercise               @relation(fields: [exerciseId], references: [id])
  dailyPatientExercise DailyPatientExercise[]
}

model DailyPatientExercise {
  id                String    @id @default(cuid())
  patientId         String
  patientExerciseId String
  isCompleted       Boolean   @default(false)
  createdDatetime   DateTime  @default(now())
  completedDatetime DateTime?

  user            User            @relation(fields: [patientId], references: [id])
  patientExercise PatientExercise @relation(fields: [patientExerciseId], references: [id])
}
