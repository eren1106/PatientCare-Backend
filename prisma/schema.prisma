datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS
enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum SignInMethod {
  EMAILPASSWORD
  GOOGLE
}

enum ExerciseDifficulty {
  EASY
  MEDIUM
  HARD
}

// MODELS
model User {
  id                String       @id @default(uuid())
  username          String       @unique
  email             String       @unique
  password          String
  signinMethod      SignInMethod
  role              UserRole
  profileImageUrl   String?
  // assignedDoctors   User[]
  lastLoginDatetime DateTime?
  createdDatetime   DateTime     @default(now())
  updatedDatetime   DateTime?

  callTo               Call[]            @relation("CallTo")
  callFrom             Call[]            @relation("CallFrom")
  messageFrom          Message[]         @relation("MessageFrom")
  messageTo            Message[]         @relation("MessageTo")
  notification         Notification[]
  assessment           Assessment[]
  patientExercise      PatientExercise[]
  appointmentDoctor    Appointment[]     @relation("AppointmentDoctor")
  appointmentPatient   Appointment[]     @relation("AppointmentPatient")
  doctorValidation     DoctorValidation?
  patientRecordDoctor  PatientRecord[]   @relation("Doctor")
  patientRecordPatient PatientRecord[]   @relation("Patient")
  questionnaire        Questionnaire[]
}

model Call {
  id              Int      @id @default(autoincrement())
  toUserId        String
  fromUserId      String
  status          String
  createdDatetime DateTime @default(now())

  userTo   User @relation("CallTo", fields: [toUserId], references: [id])
  userFrom User @relation("CallFrom", fields: [fromUserId], references: [id])
}

model Message {
  id              Int      @id @default(autoincrement())
  message         String
  fromUserId      String
  toUserId        String
  createdDatetime DateTime @default(now())

  userFrom User @relation("MessageFrom", fields: [fromUserId], references: [id])
  userTo   User @relation("MessageTo", fields: [toUserId], references: [id])
}

model Notification {
  id              Int      @id @default(autoincrement())
  userId          String
  title           String
  message         String
  redirectUrl     String?
  createdDatetime DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Assessment {
  id              Int      @id @default(autoincrement())
  userId          String
  questionnaireId Int
  createdDatetime DateTime @default(now())
  responseId      Int

  user          User            @relation(fields: [userId], references: [id])
  questionnaire Questionnaire   @relation(fields: [questionnaireId], references: [id])
  response      Response        @relation(fields: [responseId], references: [id])
  patientRecord PatientRecord[] @relation("PatientRecordAssessment")
}

model Questionnaire {
  id              Int       @id @default(autoincrement())
  title           String
  description     String
  type            String
  authorId        String
  createdDatetime DateTime  @default(now())
  updatedDatetime DateTime?

  author     User         @relation(fields: [authorId], references: [id])
  question   Question[]   @relation("QuestionnaireQuestion")
  assessment Assessment[]
}

model Question {
  id          Int    @id @default(autoincrement())
  title       String
  fieldTypeId Int

  fieldType     FieldType       @relation(fields: [fieldTypeId], references: [id])
  response      Response[]
  questionnaire Questionnaire[] @relation("QuestionnaireQuestion")
}

model Response {
  id         Int    @id @default(autoincrement())
  questionId Int
  response   String

  question   Question     @relation(fields: [questionId], references: [id])
  assessment Assessment[]
}

model FieldType {
  id   Int    @id @default(autoincrement())
  name String

  question Question[]
}

model DoctorValidation {
  id                 Int     @id @default(autoincrement())
  doctorId           String  @unique
  registrationNumber String
  identityImageUrl   String?

  user User @relation(fields: [doctorId], references: [id])
}

model PatientRecord {
  id              Int       @id @default(autoincrement())
  doctorId        String
  patientId       String
  createdDatetime DateTime  @default(now())
  updatedDatetime DateTime?

  doctor      User          @relation("Doctor", fields: [doctorId], references: [id])
  patient     User          @relation("Patient", fields: [patientId], references: [id])
  appointment Appointment[] @relation("PatientRecordAppointment")
  assessment  Assessment[]  @relation("PatientRecordAssessment")
  exercise    Exercise[]

  @@unique([doctorId, patientId])
}

model Appointment {
  id                Int       @id @default(autoincrement())
  title             String
  description       String
  scheduledDatetime DateTime
  doctorId          String
  patientId         String
  createdDatetime   DateTime  @default(now())
  updatedDatetime   DateTime?

  userDoctor    User           @relation("AppointmentDoctor", fields: [doctorId], references: [id])
  userPatient   User           @relation("AppointmentPatient", fields: [patientId], references: [id])
  patientRecord PatientRecord? @relation("PatientRecordAppointment", fields: [doctorId, patientId], references: [doctorId, patientId])
}

model ExerciseCategory {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  categoryImg String?

  exercise Exercise[]
}

model Exercise {
  id                 Int                @id @default(autoincrement())
  exerciseCategoryId Int
  thumbnail          String?
  title              String
  description        String
  duration           Int
  difficulty         ExerciseDifficulty
  content            String?
  videoUrl           String?
  createdDatetime    DateTime           @default(now())
  updatedDatetime    DateTime?

  exerciseCategory ExerciseCategory  @relation(fields: [exerciseCategoryId], references: [id])
  patientExercise  PatientExercise[]
  patientRecord    PatientRecord[]
}

model PatientExercise {
  id                Int       @id @default(autoincrement())
  patientId         String
  exerciseId        Int
  isCompleted       Boolean   @default(false)
  completedDatetime DateTime?

  user     User     @relation(fields: [patientId], references: [id])
  exercise Exercise @relation(fields: [exerciseId], references: [id])
}
